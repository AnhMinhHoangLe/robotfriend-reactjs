{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/errorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","hassError","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"yMAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,oCACI,4BAAQC,UAAU,oDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,QCUTK,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,oCACKA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,cCM9BW,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEjB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEXI,EAZA,SAACC,GACZ,OACI,yBACIC,MAAO,CACHC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAEXJ,EAAMK,WCWJC,E,kDAlBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAMDC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAU,M,+BAId,OAAIG,KAAKJ,MAAMM,UACJ,wDAEJF,KAAKX,MAAMK,a,GAhBCS,aC6DZC,E,kDArDX,aAAe,IAAD,8BAEV,gBAoBJC,eAAiB,SAACC,GAGd,EAAKL,SAAS,CACVM,YAAaD,EAAME,OAAOC,SAtB9B,EAAKb,MAAQ,CACTlB,OAAQ,GACR6B,YAAa,IANP,E,gEASO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACH,EAAKb,SAAS,CAAEvB,OAAQoC,S,+BAe1B,IAAD,EAC2Bd,KAAKJ,MAA7BlB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAACC,GAGlC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQxC,EAAO0C,OAGX,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,OAP9B,wBAAIzC,UAAU,MAAd,mB,GAxCM6B,a,YCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.103b4eac.chunk.js","sourcesContent":["// this file is to input the format of html\r\nimport React from \"react\";\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <>\r\n            <header className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </header>\r\n        </>\r\n    );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <>\r\n            {robots.map((user, index) => {\r\n                return (\r\n                    <Card\r\n                        key={index}\r\n                        id={robots[index].id}\r\n                        name={robots[index].name}\r\n                        email={robots[index].email}\r\n                    />\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\n//using destructing here to allow us to grab \r\n//the props object and grab its properties. \r\nconst SearchBox = ({ searchChange }) => {\r\n    \r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n                //the onchange event occurs when the value \r\n                // of an element has been changed.\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                overflowY: \"scroll\",\r\n                border: \"5px solid black\",\r\n                height: \"800px\",\r\n            }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        };\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true,\r\n        });\r\n    }\r\n    render() {\r\n        if (this.state.hassError) {\r\n            return <h1>Oooops. This is not good</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport { robots } from \"../robots\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/errorBoundry\";\r\n\r\nclass App extends Component {\r\n    // this will summarize the included var by constructor\r\n    constructor() {\r\n        //to call the constructor of component\r\n        super();\r\n        //to call the state, can change and affect\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: \"\",\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((users) => {\r\n                this.setState({ robots: users }); //to update the robots\r\n            });\r\n    }\r\n    //this one is to update the variable of searchfield,\r\n    //you need to use setState\r\n    //very time the input changes, just like we did with DOM manipulation,\r\n    //we get an event, and within this event I'm going to \"console.log\" this event\r\n    onSearchChange = (event) => {\r\n        // schedules an update to a component's state object. When state\r\n        //changes, the component responds by re-rendering.\r\n        this.setState({\r\n            searchfield: event.target.value,\r\n        });\r\n    };\r\n    // console.log(event.target.value);\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter((robot) => {\r\n            // The includes() method determines whether a string\r\n            //contains the characters of a specified string.\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        return !robots.length ? (\r\n            <h1 className='tc'>Loading ...</h1>\r\n        ) : (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robot Friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n                {/* this one is for access to the robots */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//this file is to input the value and frame for pages\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\"; // this will contain all children\nimport \"./index.css\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}